plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-aws-documentation

service: wallets
custom:
  pythonRequirements:
    fileName: wallets/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: '/var/cache/serverless'
  prune:
    automatic: true
    includeLayers: true
    number: 2
  documentation:
    models:
      - name: "ErrorMessage"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/error.json)}
      - name: "PostWalletOutput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/post_wallet.json):PostWalletOutput}
      - name: "PostWalletInput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/post_wallet.json):PostWalletInput}
      - name: "GetWalletOutput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/get_wallet.json):GetWalletOutput}
      - name: "WalletRegisterOutput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/wallet_register.json):WalletRegisterOutput}
      - name: "WalletRegisterInput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/wallet_register.json):WalletRegisterInput}
      - name: "WalletChannelDepositOutput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/wallet_channel_deposit.json):WalletChannelDepositOutput}
      - name: "WalletChannelDepositInput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/wallet_channel_deposit.json):WalletChannelDepositInput}
      - name: "WalletStatusOutput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/wallet_status.json):WalletStatusOutput}
      - name: "WalletStatusInput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/wallet_status.json):WalletStatusInput}
      - name: "WalletTransactionsOutput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/wallet_transactions.json):WalletTransactionsOutput}
      - name: "CreateChannelOutput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/create_channel.json):CreateChannelOutput}
      - name: "CreateChannelInput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/create_channel.json):CreateChannelInput}
      - name: "DeleteUserWalletOutput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/delete_user_wallet.json):DeleteUserWalletOutput}
      - name: "DeleteUserWalletInput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/delete_user_wallet.json):DeleteUserWalletInput}
      - name: "CreateChannelEventOutput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/create_channel_event.json):CreateChannelEventOutput}
      - name: "CreateChannelEventInput"
        contentType: "application/json"
        schema: ${file(wallets/documentation/models/create_channel_event.json):CreateChannelEventInput}

provider:
  name: aws
  runtime: python3.8
  description: Dapp user service# optional, Description to publish to AWS
  memorySize: 128
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: wallets
  deploymentPrefix: serverless
  versionFunctions: false
  tracing: true

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - venv/**
    - config.ropsten.json
    - test/**
    - testcase/**
    - sql_script/**
    - service_status/**
    - contract_api/**
    - dapp-user/**
    - payments/**
    - repository/**
    - Readme.md
    - parse_events.sh
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - heath_check.sh
    - node_modules/**
  include:
    - node_modules/singularitynet-platform-contracts/**
    - resources/**


functions:
  create-and-register-wallet:
    warmup: true
    handler: wallets/application/handlers/wallet_handlers.create_and_register_wallet
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  get-wallets:
    warmup: true
    handler: wallets/application/handlers/wallet_handlers.get_wallets
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  register-wallet:
    warmup: true
    handler: wallets/application/handlers/wallet_handlers.register_wallet
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  channel-add-funds:
    warmup: true
    handler: wallets/application/handlers/wallet_handlers.channel_add_funds
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  set-default-wallet:
    warmup: true
    handler: wallets/application/handlers/wallet_handlers.set_default_wallet
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  get-transactions-for-order:
    warmup: true
    handler: wallets/application/handlers/wallet_handlers.get_transactions_for_order
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  remove-user-wallet:
    warmup: true
    handler: wallets/application/handlers/wallet_handlers.remove_user_wallet
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  create-channel:
    warmup: true
    handler: wallets/application/handlers/channel_handlers.create_channel
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  create-channel-event:
    warmup: true
    handler: wallets/application/handlers/channel_handlers.record_create_channel_event
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  open-channel-by-third-party:
    handler: wallets/application/handlers/channel_handlers.open_channel_by_third_party
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule: rate(2 minutes)

  channelTxnStatus:
    warmup: true
    handler: wallets/application/handlers/channel_transaction_status_handler.request_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule: rate(2 minutes)
