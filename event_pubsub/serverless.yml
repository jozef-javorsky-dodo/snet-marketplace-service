plugins:
  - serverless-prune-plugin
  - serverless-latest-layer-version

service: event-pubsub
custom:
  pythonRequirements:
    fileName: event_pubsub/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: '/var/cache/serverless'
  prune:
    automatic: true
    includeLayers: true
    number: 1

provider:
  name: aws
  runtime: python3.8
  description: event_publisher # optional, Description to publish to AWS
  memorySize: 512
  timeout: 60
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  layers:
    - ${file(./config.${self:provider.stage}.json):GeneralPythonLibsMP}
    - ${file(./config.${self:provider.stage}.json):GrpcPythonLibsMP}
    - ${file(./config.${self:provider.stage}.json):OptionalPythonLibsMP}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: orchestrator
  deploymentPrefix: serverless
  versionFunctions: false

package:
  exclude:
    - contract_api/**
    - dapp_user/**
    - lambda_layers/**
    - notification/**
    - orchestrator/**
    - payments/**
    - registry/**
    - event_pubsub/testcases/**
    - event_pubsub/package.json
    - event_pubsub/package-lock.json
    - event_pubsub/serverless.yml
    - event_pubsub/requirements.txt
    - event_pubsub/documentation/**
    - service_media/**
    - service_status/**
    - signer/**
    - sql_script/**
    - utility/**
    - verification/**
    - wallets/**
    - .circleci/**
    - .serverless/**
    - node_modules/**
    - package.json
    - package-lock.json
    - .gitignore
    - serverless.yml
    - README.md
    - build.sh
    - Dockerfile
    - health_check.sh
    - LICENSE
    - config.rt-v2.json
  include:
    - resources/**


functions:

  mpe-event-publisher:
    handler: event_pubsub/handlers/event_producer_handlers.mpe_event_producer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    layers:
        - ${file(./config.${self:provider.stage}.json):SnetContract}
    events:
      - schedule:
          rate: rate(2 minutes)
          enabled: ${file(./config.${self:provider.stage}.json):mpe_cron_status}

  mpe-event-listener:
    handler: event_pubsub/handlers/event_listener_handlers.mpe_event_listener_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    layers:
      - ${file(./config.${self:provider.stage}.json):SnetContract}
    events:
      - schedule:
          rate: rate(2 minutes)
          enabled: ${file(./config.${self:provider.stage}.json):mpe_cron_status}

  registry-event-publisher:
    handler:  event_pubsub/handlers/event_producer_handlers.registry_event_producer_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    layers:
        - ${file(./config.${self:provider.stage}.json):SnetContract}
    events:
      - schedule:
          rate: rate(2 minutes)
          enabled: ${file(./config.${self:provider.stage}.json):registry_cron_status}

  registry-event-listener:
    handler: event_pubsub/handlers/event_listener_handlers.registry_event_listener_handler
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    layers:
        - ${file(./config.${self:provider.stage}.json):SnetContract}
    events:
      - schedule:
          rate: rate(2 minutes)
          enabled: ${file(./config.${self:provider.stage}.json):registry_cron_status}

#  rfai-event-publisher:
#    handler: event_pubsub/handlers/event_producer_handlers.rfai_event_producer_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#      - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):rfai_cron_status}
#
#  rfai-event-listener:
#    handler: event_pubsub/handlers/event_listener_handlers.rfai_event_listener_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#        - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):rfai_cron_status}
#
#  token-stake-event-listener:
#    handler: event_pubsub/handlers/event_listener_handlers.token_stake_event_listener_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#        - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):token_stake_cron_status}
#
#  token-stake-event-publisher:
#    handler:  event_pubsub/handlers/event_producer_handlers.token_stake_event_producer_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#        - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):token_stake_cron_status}
#
#  airdrop-event-publisher:
#    handler:  event_pubsub/handlers/event_producer_handlers.airdrop_event_producer_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#        - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):airdrop_cron_status}
#
#  occam_airdrop-event-publisher:
#    handler:  event_pubsub/handlers/event_producer_handlers.occam_airdrop_event_producer_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#        - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):occam_airdrop_cron_status}
#
#  converter-agix-event-publisher:
#    handler: event_pubsub/handlers/event_producer_handlers.converter_agix_event_producer_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#      - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):converter_agix_cron_status}
#
#  converter-agix-event-listener:
#    handler: event_pubsub/handlers/event_listener_handlers.converter_agix_event_listener_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#      - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):converter_agix_cron_status}
#
#  converter-ntx-event-publisher:
#    handler: event_pubsub/handlers/event_producer_handlers.converter_ntx_event_producer_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#      - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):converter_ntx_cron_status}
#
#  converter-ntx-event-listener:
#    handler: event_pubsub/handlers/event_listener_handlers.converter_ntx_event_listener_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#      - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):converter_ntx_cron_status}
#
#  converter-rjv-event-publisher:
#    handler: event_pubsub/handlers/event_producer_handlers.converter_rjv_event_producer_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#      - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):converter_rjv_cron_status}
#
#  converter-rjv-event-listener:
#    handler: event_pubsub/handlers/event_listener_handlers.converter_rjv_event_listener_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#      - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):converter_rjv_cron_status}
#
#  converter-cgv-event-publisher:
#    handler: event_pubsub/handlers/event_producer_handlers.converter_cgv_event_producer_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#      - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):converter_cgv_cron_status}
#
#  converter-cgv-event-listener:
#    handler: event_pubsub/handlers/event_listener_handlers.converter_cgv_event_listener_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#      - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):converter_cgv_cron_status}
#
#  airdrop-event-listener:
#    handler: event_pubsub/handlers/event_listener_handlers.airdrop_event_listener_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#      - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):airdrop_cron_status}
#
#  occam-airdrop-event-listener:
#    handler: event_pubsub/handlers/event_listener_handlers.occam_airdrop_event_listener_handler
#    role: ${file(./config.${self:provider.stage}.json):ROLE}
#    tags:
#      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
#      Team: ${file(./config.${self:provider.stage}.json):TEAM}
#      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
#    vpc:
#      securityGroupIds:
#        - ${file(./config.${self:provider.stage}.json):SG1}
#        - ${file(./config.${self:provider.stage}.json):SG2}
#      subnetIds:
#        - ${file(./config.${self:provider.stage}.json):VPC1}
#        - ${file(./config.${self:provider.stage}.json):VPC2}
#    layers:
#      - ${file(./config.${self:provider.stage}.json):SnetContract}
#    events:
#      - schedule:
#          rate: rate(2 minutes)
#          enabled: ${file(./config.${self:provider.stage}.json):occam_airdrop_cron_status}

  get-raw-event-details:
    warmup: true
    handler: event_pubsub/handlers/raw_events_handler.get_raw_event_details
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    tags:
      Environment: ${file(./config.${self:provider.stage}.json):ENVIRONMENT}
      Team: ${file(./config.${self:provider.stage}.json):TEAM}
      Owner: ${file(./config.${self:provider.stage}.json):OWNER}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    layers:
        - ${file(./config.${self:provider.stage}.json):SnetContract}
    events:
      - http:
          method: POST
          path: /event_details
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

