plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-latest-layer-version

service: contract-api
provider:
  name: aws
  runtime: python3.12
  memorySize: 512
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  layers:
    - ${file(./config.${self:provider.stage}.json):GeneralPythonLibsMP}
    - ${file(./config.${self:provider.stage}.json):GrpcPythonLibsMP}
    - ${file(./config.${self:provider.stage}.json):OptionalPythonLibsMP}
    - ${file(./config.${self:provider.stage}.json):SnetContract}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: contract-api
  deploymentPrefix: serverless

custom:
  prune:
    automatic: true
    includeLayers: true
    number: 1
  queue:
    queueMessageRetention: ${file(./config.${self:provider.stage}.json):QUEUE_MESSAGE_RETENTION, 14400}
    dlqMessageRetention: ${file(./config.${self:provider.stage}.json):DLQ_MESSAGE_RETENTION, 1209600}
    queueMaxReceiveCount: ${file(./config.${self:provider.stage}.json):QUEUE_MAX_RECEIVE_COUNT, 2}
    receiveMessageWaitTimeSeconds: ${file(./config.${self:provider.stage}.json):RECEIVE_MESSAGE_WAIT_TIME_SECONDS, 20}
    messageVisibilityTimeout: ${file(./config.${self:provider.stage}.json):MESSAGE_VISIBILITY_TIMEOUT, 60}

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - venv/**
    - config.ropsten.json
    - sls_deploy.sh
    - serverless.yml
    - test/**
    - tests/**
    - sql_script/**
    - service_status/**
    - dapp-user/**
    - repository/**
    - Readme.md
    - parse_events.sh
    - package.json
    - Dockerfile
    - License
    - log_setup.py
    - heath_check.sh
    - node_modules/**
    - wallets/**
    - payments/**
    - orchestrator/**
    - notification/**
    - dapp_user/**
  include:
    - resources/**

resources:
  Resources:
    mpeEventConsumerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):MPE_QUEUE}
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.queueMessageRetention}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt mpeEventConsumerDLQ.Arn
          maxReceiveCount: ${self:custom.queue.queueMaxReceiveCount}

    mpeEventConsumerQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: mpeEventConsumerQueue
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt mpeEventConsumerQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${file(./config.${self:provider.stage}.json):MPE_TOPIC_ARN}
        Queues:
          - !Ref mpeEventConsumerQueue

    mpeEventConsumerTopicSubscriptionForSQS:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt mpeEventConsumerQueue.Arn
        TopicArn: ${file(./config.${self:provider.stage}.json):MPE_TOPIC_ARN}

    mpeEventConsumerDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):MPE_QUEUE}-dlq
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.dlqMessageRetention}

    mpeEventConsumerDLQPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: mpeEventConsumerDLQ
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt mpeEventConsumerDLQ.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt mpeEventConsumerQueue.Arn
        Queues:
          - !Ref mpeEventConsumerDLQ

    registryEventConsumerQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):REGISTRY_QUEUE}
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.queueMessageRetention}
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt registryEventConsumerDLQ.Arn
          maxReceiveCount: ${self:custom.queue.queueMaxReceiveCount}

    registryEventConsumerQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: registryEventConsumerQueue
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt registryEventConsumerQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: ${file(./config.${self:provider.stage}.json):REGISTRY_TOPIC_ARN}
        Queues:
          - !Ref registryEventConsumerQueue

    registryEventConsumerTopicSubscriptionForSQS:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        Endpoint: !GetAtt registryEventConsumerQueue.Arn
        TopicArn: ${file(./config.${self:provider.stage}.json):REGISTRY_TOPIC_ARN}

    registryEventConsumerDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(./config.${self:provider.stage}.json):REGISTRY_QUEUE}-dlq
        VisibilityTimeout: ${self:custom.queue.messageVisibilityTimeout}
        ReceiveMessageWaitTimeSeconds: ${self:custom.queue.receiveMessageWaitTimeSeconds}
        MessageRetentionPeriod: ${self:custom.queue.dlqMessageRetention}

    registryEventConsumerDLQPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: registryEventConsumerDLQ
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - sqs:SendMessage
              Resource: !GetAtt registryEventConsumerDLQ.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !GetAtt registryEventConsumerQueue.Arn
        Queues:
          - !Ref registryEventConsumerDLQ


functions:

# =================== org handlers ===================

  get-all-organizations:
    handler: contract_api.application.handlers.organization_handlers.get_all_organizations
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  get-group:
    handler:  contract_api.application.handlers.organization_handlers.get_group
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

# =================== service handlers ===================

  get-service-filters:
    handler: contract_api.application.handlers.service_handlers.get_service_filters
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /service-filters
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  get-services:
    handler: contract_api.application.handlers.service_handlers.get_services
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /services
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  get-service:
    handler: contract_api.application.handlers.service_handlers.get_service
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /org/{orgId}/service/{serviceId}
          request:
            parameters:
              paths:
                orgId: true
                serviceId: true
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  curate-service:
    handler: contract_api.application.handlers.service_handlers.curate_service
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  get-offchain-attribute:
    handler: contract_api.application.handlers.service_handlers.get_offchain_attribute
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  save-offchain-attribute:
    handler: contract_api.application.handlers.service_handlers.save_offchain_attribute
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  update-service-rating:
    handler: contract_api.application.handlers.service_handlers.update_service_rating
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

# =================== channel handlers ===================

  get-channels:
    handler: contract_api.application.handlers.channel_handlers.get_channels
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /channel
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  get-channels-for-group:
    handler: contract_api.application.handlers.channel_handlers.get_group_channels
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  update-consumed-balance:
    handler: contract_api.application.handlers.channel_handlers.update_consumed_balance
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          path: /channel/{channelId}/balance
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

# =================== consumer handlers ===================

  mpe-event-consumer:
    handler: contract_api.application.handlers.consumer_handlers.mpe_event_consumer
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - mpeEventConsumerQueue
              - Arn
          batchSize: 1

  registry-event-consumer:
    handler: contract_api.application.handlers.consumer_handlers.registry_event_consumer
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - registryEventConsumerQueue
              - Arn
          batchSize: 1

  service-deployment-manager:
    handler: contract_api.application.handlers.consumer_handlers.manage_service_deployment
    role: ${file(./config.${self:provider.stage}.json):ROLE1}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

# =================== dapp build handlers ===================

  notify-deploy-status:
    handler: contract_api.application.handlers.dapp_build_handlers.notify_deploy_status
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  trigger-dapp-build:
    handler: contract_api.application.handlers.dapp_build_handlers.trigger_dapp_build
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - s3:
          bucket: ${file(./config.${self:provider.stage}.json):COMPONENT_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - suffix: component.tar.gz
          existing: true
