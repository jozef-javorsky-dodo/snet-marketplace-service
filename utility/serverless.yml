plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-plugin-tracing
  - serverless-prune-plugin

service: common-utility
provider:
  name: aws
  runtime: python3.8
  description: utility operations for snet
  memorySize: 512
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts
    serverSideEncryption: AES256
    tags:
      key1: registry
  deploymentPrefix: serverless
  tracing: true

custom:
  pythonRequirements:
    fileName: utility/requirements.txt
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: "/var/cache/serverless"
  prune:
    automatic: true
    includeLayers: true
    number: 2

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - serverless.yml
    - node_modules/**
  include:
    - node_modules/singularitynet-platform-contracts/**
    - resources/**

functions:
  upload:
    handler: utility.application.handlers.upload_handlers.upload_file
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /upload
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  agi-usd-rates:
    handler: utility.application.handlers.crypto_fiat_handler.get_agi_usd_rate
    role: ${file(./config.${self:provider.stage}.json):AGI_ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule:
          rate: cron(55 23 * * ? *)
          enabled: true

  calculate-latest-agi-rate:
    handler: utility.application.handlers.crypto_fiat_handler.calculate_latest_agi_rate
    role: ${file(./config.${self:provider.stage}.json):AGI_ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - schedule:
          rate: cron(0 9 ? * MON *)
          enabled: true

  currency-to-token-conversion:
    warmup: true
    handler: utility/application/handlers.crypto_fiat_handler.get_agi_fiat_rate
    role: ${file(./config.${self:provider.stage}.json):AGI_ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: GET
          path: /currency/{currency}/crypto
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  slack-auth-wrapper:
    handler: utility.application.handlers.slack_feedback_handler.main
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /feedback/slack
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  manage-proto-compilation:
    handler: utility.application.handlers.proto_stubs_handler.manage_proto_compilation
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  generate-grpc-python-stubs:
    handler: utility.application.handlers.proto_stubs_handler.generate_grpc_python_stubs
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}