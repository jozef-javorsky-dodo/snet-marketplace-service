plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-latest-layer-version

service: common-utility
provider:
  name: aws
  runtime: python3.12
  memorySize: 512
  timeout: 30
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  layers:
    - ${file(./config.${self:provider.stage}.json):GeneralPythonLibsMP}
    - ${file(./config.${self:provider.stage}.json):GrpcPythonLibsMP}
  deploymentBucket:
    name: snet-serverless-artifacts
    serverSideEncryption: AES256
    tags:
      key1: registry
  deploymentPrefix: serverless

custom:
  prune:
    automatic: true
    includeLayers: true
    number: 1

package:
  exclude:
    - .circleci/**
    - .gitignore/**
    - .serverless/**
    - requirements.txt
    - serverless.yml
    - node_modules/**
  include:
    - node_modules/singularitynet-platform-contracts/**
    - resources/**

functions:
  upload-file:
    handler: utility.application.handlers.upload_file_handlers.upload_file
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}
    events:
      - http:
          method: POST
          path: /upload
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with

  manage-proto-compilation:
    handler: utility.application.handlers.stubs_generator_handlers.manage_proto_compilation
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}

  generate-python-stubs:
    handler: utility.application.handlers.stubs_generator_handlers.generate_python_stubs
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc:
      securityGroupIds:
        - ${file(./config.${self:provider.stage}.json):SG1}
        - ${file(./config.${self:provider.stage}.json):SG2}
      subnetIds:
        - ${file(./config.${self:provider.stage}.json):VPC1}
        - ${file(./config.${self:provider.stage}.json):VPC2}